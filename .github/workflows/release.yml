name: 发布版本

on:
  # 当创建release时触发
  release:
    types: [published]
  
  # 手动触发发布
  workflow_dispatch:
    inputs:
      tag_name:
        description: '发布标签名称（如：v1.0.0）'
        required: true
        type: string
      release_name:
        description: '发布名称'
        required: false
        type: string
      draft:
        description: '创建草稿发布'
        required: false
        default: false
        type: boolean
      prerelease:
        description: '标记为预发布'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 创建GitHub Release（仅手动触发时）
  create-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release-tag: ${{ steps.create-release.outputs.tag_name }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取版本信息
        id: get-version
        run: |
          VERSION=$(grep '^version = ' api/pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "项目版本: $VERSION"

      - name: 验证标签格式
        run: |
          TAG="${{ github.event.inputs.tag_name }}"
          VERSION="${{ steps.get-version.outputs.version }}"
          
          # 检查标签格式
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "错误: 标签格式不正确。应该是 vX.Y.Z 格式"
            exit 1
          fi
          
          # 提取标签中的版本号
          TAG_VERSION=${TAG#v}
          
          # 检查标签版本是否与项目版本匹配
          if [ "$TAG_VERSION" != "$VERSION" ]; then
            echo "警告: 标签版本 ($TAG_VERSION) 与项目版本 ($VERSION) 不匹配"
            echo "建议更新 api/pyproject.toml 中的版本号或使用正确的标签"
          fi

      - name: 生成更新日志
        id: changelog
        run: |
          # 获取最新的提交信息作为更新日志
          CHANGELOG=$(git log --pretty=format:"- %s" --since="1 week ago" | head -20)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- 版本更新"
          fi
          
          # 保存到文件以避免特殊字符问题
          echo "$CHANGELOG" > changelog.txt
          echo "changelog-file=changelog.txt" >> $GITHUB_OUTPUT

      - name: 创建Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          release_name: ${{ github.event.inputs.release_name || github.event.inputs.tag_name }}
          body_path: ${{ steps.changelog.outputs.changelog-file }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}

  # 构建发布镜像
  build-release-image:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always() && (needs.create-release.result == 'success' || github.event_name == 'release')
    permissions:
      contents: read
      packages: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取版本和标签信息
        id: version-info
        run: |
          VERSION=$(grep '^version = ' api/pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event_name }}" = "release" ]; then
            TAG_NAME="${{ github.event.release.tag_name }}"
          else
            TAG_NAME="${{ needs.create-release.outputs.release-tag }}"
          fi
          echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          echo "项目版本: $VERSION"
          echo "发布标签: $TAG_NAME"

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取镜像元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # 使用release标签
            type=raw,value=${{ steps.version-info.outputs.tag-name }}
            # 使用版本号
            type=raw,value=${{ steps.version-info.outputs.version }}
            # 使用latest标签
            type=raw,value=latest
            # 使用stable标签（非预发布版本）
            type=raw,value=stable,enable=${{ !github.event.release.prerelease }}

      - name: 构建并推送发布镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version-info.outputs.version }}

      - name: 输出发布信息
        run: |
          echo "## 🚀 版本发布完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**发布标签:** ${{ steps.version-info.outputs.tag-name }}" >> $GITHUB_STEP_SUMMARY
          echo "**项目版本:** ${{ steps.version-info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Docker镜像标签:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**拉取命令:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# 拉取最新版本"
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 拉取指定版本"
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version-info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 通知发布完成
        if: github.event_name == 'release'
        run: |
          echo "✅ 版本 ${{ steps.version-info.outputs.tag-name }} 发布完成！"
          echo "Docker镜像已推送到 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
