# 优化版本3：激进优化，使用distroless
# 预计镜像大小：150-200MB（减少约200MB）
# 注意：需要外部服务支持，调试较困难

# 多阶段构建 - 前端构建阶段
FROM node:18-alpine AS frontend-builder

WORKDIR /build

# 复制前端项目文件
COPY home/package*.json home/pnpm-lock.yaml* ./home/
COPY admin/package*.json admin/pnpm-lock.yaml* ./admin/

# 安装pnpm
RUN npm config set registry https://registry.npmmirror.com && \
    npm install -g pnpm && \
    pnpm config set registry https://registry.npmmirror.com

# 构建前端项目（极致优化）
WORKDIR /build/home
COPY home/ .
RUN pnpm install --frozen-lockfile && \
    NODE_ENV=production pnpm build && \
    # 极致压缩
    find dist -name "*.js" -exec gzip -9 -k {} \; && \
    find dist -name "*.css" -exec gzip -9 -k {} \; && \
    find dist -name "*.html" -exec gzip -9 -k {} \; && \
    find dist -name "*.svg" -exec gzip -9 -k {} \; && \
    find dist -name "*.json" -exec gzip -9 -k {} \; && \
    # 删除所有不必要的文件
    find dist -name "*.map" -delete && \
    find dist -name "*.txt" -delete && \
    find dist -name "*.md" -delete

# 构建管理后台
WORKDIR /build/admin
COPY admin/ .
RUN pnpm install --frozen-lockfile && \
    NODE_ENV=production pnpm build && \
    # 极致压缩
    find dist -name "*.js" -exec gzip -9 -k {} \; && \
    find dist -name "*.css" -exec gzip -9 -k {} \; && \
    find dist -name "*.html" -exec gzip -9 -k {} \; && \
    find dist -name "*.svg" -exec gzip -9 -k {} \; && \
    find dist -name "*.json" -exec gzip -9 -k {} \; && \
    # 删除所有不必要的文件
    find dist -name "*.map" -delete && \
    find dist -name "*.txt" -delete && \
    find dist -name "*.md" -delete

# Python依赖构建阶段
FROM python:3.11-slim AS python-builder

# 安装构建依赖
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libc6-dev \
    libffi-dev \
    libssl-dev \
    cargo \
    rustc \
    && pip install --no-cache-dir pdm

WORKDIR /build

# 复制Python项目文件
COPY api/pyproject.toml api/pdm.lock* ./

# 安装Python依赖（极致优化）
RUN pdm install --prod --no-editable --no-self && \
    # 深度清理Python环境
    find /build/.venv -name "*.pyc" -delete && \
    find /build/.venv -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /build/.venv -name "*.pyo" -delete && \
    find /build/.venv -name "*.pyd" -delete && \
    find /build/.venv -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /build/.venv -name "test" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /build/.venv -name "docs" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /build/.venv -name "examples" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /build/.venv -name "*.dist-info" -type d -exec rm -rf {}/RECORD {} + 2>/dev/null || true && \
    find /build/.venv -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true && \
    # 删除大型不必要的包
    rm -rf /build/.venv/lib/python*/site-packages/pip* && \
    rm -rf /build/.venv/lib/python*/site-packages/setuptools* && \
    rm -rf /build/.venv/lib/python*/site-packages/wheel* && \
    # 清理包管理器缓存
    apt-get purge -y gcc g++ libc6-dev libffi-dev libssl-dev cargo rustc && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    pip cache purge

# 应用代码准备阶段
FROM python:3.11-slim AS app-prep

WORKDIR /app

# 复制并优化应用代码
COPY api/app/ /app/api/app/
COPY api/pyproject.toml /app/api/

# 清理应用代码
RUN find /app -name "*.pyc" -delete && \
    find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find /app -name "*.pyo" -delete && \
    find /app -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true

# 最终运行阶段 - 使用distroless
FROM gcr.io/distroless/python3-debian11:latest AS runtime

# 复制Python依赖
COPY --from=python-builder /build/.venv /app/.venv

# 复制前端构建文件
COPY --from=frontend-builder /build/home/dist /app/static/home
COPY --from=frontend-builder /build/admin/dist /app/static/admin

# 复制应用代码
COPY --from=app-prep /app /app

# 设置工作目录
WORKDIR /app

# 设置环境变量
ENV PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH="/app/api:$PYTHONPATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONOPTIMIZE=2

# 暴露端口
EXPOSE 8000

# 运行应用（distroless不支持shell，直接运行Python）
ENTRYPOINT ["/app/.venv/bin/python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
