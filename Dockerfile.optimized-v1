# 优化版本1：保守优化，保持当前架构
# 预计镜像大小：280-320MB（减少约70MB）

# 多阶段构建 - 前端构建阶段
FROM node:18-alpine AS frontend-builder

# 设置工作目录
WORKDIR /build

# 复制前端项目文件
COPY home/package*.json home/pnpm-lock.yaml* ./home/
COPY admin/package*.json admin/pnpm-lock.yaml* ./admin/

# 安装pnpm并设置镜像源
RUN npm config set registry https://registry.npmmirror.com && \
    npm install -g pnpm && \
    pnpm config set registry https://registry.npmmirror.com

# 构建前端项目
WORKDIR /build/home
COPY home/ .
RUN pnpm install --frozen-lockfile && \
    pnpm build && \
    # 压缩静态文件
    find dist -name "*.js" -exec gzip -k {} \; && \
    find dist -name "*.css" -exec gzip -k {} \; && \
    find dist -name "*.html" -exec gzip -k {} \;

# 构建管理后台
WORKDIR /build/admin
COPY admin/ .
RUN pnpm install --frozen-lockfile && \
    pnpm build && \
    # 压缩静态文件
    find dist -name "*.js" -exec gzip -k {} \; && \
    find dist -name "*.css" -exec gzip -k {} \; && \
    find dist -name "*.html" -exec gzip -k {} \;

# Python依赖构建阶段
FROM python:3.11-alpine AS python-builder

# 安装构建依赖（合并到一个RUN指令）
RUN apk add --no-cache --virtual .build-deps \
    gcc \
    musl-dev \
    libffi-dev \
    openssl-dev \
    cargo \
    rust \
    && pip install --no-cache-dir pdm

# 设置工作目录
WORKDIR /build

# 复制Python项目文件
COPY api/pyproject.toml api/pdm.lock* ./

# 安装Python依赖到指定目录
RUN pdm install --prod --no-editable --no-self && \
    # 清理构建依赖
    apk del .build-deps && \
    # 清理pip缓存
    pip cache purge

# 最终运行阶段 - 使用更小的基础镜像
FROM python:3.11-alpine AS runtime

# 安装运行时依赖（精简版本）
RUN apk add --no-cache \
    nginx \
    redis \
    supervisor \
    sqlite \
    curl \
    gzip \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

# 创建应用目录
WORKDIR /app

# 创建必要的目录（合并到一个RUN指令）
RUN mkdir -p \
    /app/api \
    /app/static/home \
    /app/static/admin \
    /app/config \
    /app/scripts \
    /app/data \
    /var/log/supervisor \
    /run/nginx \
    && addgroup -g 1000 appuser \
    && adduser -D -s /bin/sh -u 1000 -G appuser appuser

# 复制Python依赖
COPY --from=python-builder /build/.venv /app/.venv

# 复制前端构建文件
COPY --from=frontend-builder /build/home/dist /app/static/home
COPY --from=frontend-builder /build/admin/dist /app/static/admin

# 复制后端代码（只复制必要的文件）
COPY api/app/ /app/api/app/
COPY api/pyproject.toml /app/api/

# 设置Python路径
ENV PATH="/app/.venv/bin:$PATH" \
    PYTHONPATH="/app/api:$PYTHONPATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# 复制配置文件
COPY docker/nginx.conf /app/config/
COPY docker/supervisord.conf /app/config/
COPY docker/redis.conf /app/config/
COPY docker/start.sh /app/scripts/
COPY docker/init_db.sh /app/scripts/

# 设置权限并清理（合并操作）
RUN chmod +x /app/scripts/start.sh /app/scripts/init_db.sh && \
    chown -R nginx:nginx /var/lib/nginx /var/log/nginx && \
    chown -R appuser:appuser /app && \
    # 清理不必要的文件
    find /app -name "*.pyc" -delete && \
    find /app -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    # 清理临时文件
    rm -rf /tmp/* /var/tmp/* /root/.cache

# 暴露端口
EXPOSE 80

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/api/health || exit 1

# 设置启动命令
CMD ["/app/scripts/start.sh"]
